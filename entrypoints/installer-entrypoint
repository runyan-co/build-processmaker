#!/usr/bin/env bash

{
  #
  # Define this for use later
  #
  if [ -n "$INSTALL_ENTERPRISE_PACKAGES" ]; then
    export INSTALL_ENTERPRISE_PACKAGES=TRUE
  fi

  #
  # Source a few necessary env variables
  #
  sourceDockerEnv() {
    if [ -f /.docker.env ]; then
      source /.docker.env;
    fi
  }

  #
  # restore app-specific storage dir
  #
  restoreAppStorage() {
    git restore ./storage/app;
  }

  #
  # empty the ./vendor directory
  #
  emptyVendorDir() {
    if [ -d ./vendor ]; then
      rm -rf ./vendor;
    fi
  }

  #
  # Installs ProcessMaker enterprise packages
  #
  installEnterprisePackages() {
    PACKAGES_DOTFILE=storage/build/.packages
    PACKAGES_COUNT=$(pm-cli packages:list | wc -l)

    if [ -f "$PACKAGES_DOTFILE" ]; then
      pm-cli output:header "Enterprise packages already installed" && exit 0;
    fi

    for PACKAGE in $(pm-cli packages:list); do
      {
        # Add the installed package to our
        # build dotfile for safekeeping
        echo "$PACKAGE" >>"$PACKAGES_DOTFILE";

        # Let the user know which package is
        # being installed
        pm-cli output:header "Installing processmaker/$PACKAGE ($(cat $PACKAGES_DOTFILE | wc -l) of $PACKAGES_COUNT)";

        # Use composer to require the package
        # we want to install
        composer require "processmaker/$PACKAGE" \
          --no-progress \
          --no-ansi \
          --no-plugins \
          --no-interaction;

        # Run the related artisan install command
        # the package provides
        php artisan "$PACKAGE:install" -v --no-ansi --no-interaction;

        # Publish any assets or files the package provides
        php artisan vendor:publish -v --tag="$PACKAGE" --no-ansi --no-interaction;
      }
    done

    #
    # dump the autoloader and run the composer scripts
    # once since we didn't during package installation
    #
    composer dumpautoload -o -v --no-ansi --no-interaction;
  }

  #
  # setup the .env file(s)
  #
  setupEnvironment() {
    ENV_REALPATH=storage/build/.env

    #
    # Create and link the .env file
    #
    pm-cli output:header "Setting up environment";

    if [ ! -f "$ENV_REALPATH" ]; then
      echo "Copying env setup file to build folder";
      cp "$PM_SETUP_DIR/.env.example" "$ENV_REALPATH";
    fi

    #
    # append the port to the app url if it's not port 80
    #
    if [ "$PM_APP_PORT" = 80 ] || [ "$PM_APP_PORT" = "80" ]; then
      PM_APP_URL_WITH_PORT="http://${PM_DOMAIN}"
    else
      PM_APP_URL_WITH_PORT="http://${PM_DOMAIN}:${PM_APP_PORT}"
    fi

    #
    # Make sure these are defined for use in the .env
    #
    {
      echo "APP_URL=${PM_APP_URL_WITH_PORT}";
      echo "BROADCASTER_HOST=http://${PM_DOMAIN}:${PM_BROADCASTER_PORT}";
      echo "SESSION_DOMAIN=${PM_DOMAIN}";
      echo "HOME=${PM_DIR}";
      echo "NODE_BIN_PATH=$(which node)";
      echo "PROCESSMAKER_SCRIPTS_DOCKER=$(which docker)";
      echo "PROCESSMAKER_SCRIPTS_HOME=${PM_DIR}/storage/app/scripts";
      echo "DB_HOST=${DB_HOST}";
      echo "DB_PORT=${DB_PORT}";
      echo "DB_HOSTNAME=${DB_HOST}";
      echo "DB_NAME=${DB_NAME}";
      echo "DB_USERNAME=${DB_USERNAME}";
      echo "DB_PASSWORD=${DB_PASSWORD}";
      echo "DATA_DB_HOST=${DB_HOST}";
      echo "DATA_DB_USERNAME=${DB_USERNAME}";
      echo "DATA_DB_PASSWORD=${DB_PASSWORD}";
      echo "DATA_DB_PORT=${DB_PORT}";
      echo "DATA_DB_NAME=${DB_NAME}";
    } >>"$ENV_REALPATH";

    if [ -f .env ]; then
      echo "Removing default .env file";
      rm -f .env;
    fi

    echo "Copying env file to app directory";
    cp "$ENV_REALPATH" .;
  }

  #
  # Install app's composer dependencies
  #
  installComposerDeps() {
    pm-cli output:header "Installing composer dependencies";

    composer install \
      --no-progress \
      --no-plugins \
      --no-scripts \
      --no-ansi \
      --no-interaction;

    composer clear-cache --no-ansi --no-interaction;
  }

  #
  # Install app's npm dependencies
  #
  npmInstallAndBuild() {
    pm-cli output:header "Installing npm dependencies";
    npm ci --no-audit --force;
    pm-cli output:header "Compiling npm assets";
    npm run dev --no-progress;
    npm cache clear --force;
  }

  #
  # turn telescope back on after install
  #
  enableTelescope() {
    php artisan telescope:resume --no-ansi --no-interaction;
  }

  #
  # Run the steps necessary to install the app
  #
  installApplication() {
    #
    # Install npm dependencies and run build
    #
#    if ! npmInstallAndBuild && sleep 5; then
#      pm-cli output:error "Error while installing npm dependencies or building assets" && exit 1;
#    fi

    #
    # Install composer dependencies
    #
    if ! installComposerDeps && sleep 5; then
      pm-cli output:error "Error while installing composer dependencies" && exit 1;
    fi

    #
    # Run the remaining artisan commands to
    # finish the base installation
    #
    php artisan key:generate --no-interaction --no-ansi;
    php artisan telescope:pause && sleep 1;
    php artisan package:discover --no-interaction --no-ansi && sleep 1;
    php artisan horizon:publish --no-interaction --no-ansi && sleep 1;
    php artisan telescope:publish --force --no-interaction --no-ansi && sleep 1;
    php artisan migrate:fresh --force --no-interaction --no-ansi && sleep 1;
    php artisan db:seed --force --no-interaction --no-ansi && sleep 1;
    php artisan passport:install --no-interaction --no-ansi && sleep 1;
    php artisan storage:link --no-interaction --no-ansi && sleep 1;
    php artisan telescope:publish --force --no-interaction --no-ansi && sleep 1;
  }

  #
  # Wait for MySQL to come online
  #
  awaitMysql() {
    until mysqladmin ping -u "$DB_USERNAME" -P "$DB_PORT" -p"$DB_PASSWORD" -h "$DB_HOST" >/dev/null 2>&1; do
      echo "Waiting for mysql..." && sleep 1;
    done
  }

  #
  # restore directories which were
  # emptied when persisted volumes
  # were mounted
  #
  restoreDirectories() {
    restoreAppStorage
    emptyVendorDir
  }

  #
  # Install steps
  #
  installProcessMaker() {
    #
    # Wait for MySQL to come online
    #
    awaitMysql;

    #
    # commands to restore directories
    # replaced by persisted volumes
    # when initialized
    #
    restoreDirectories;

    #
    # setup the environment
    #
    if ! setupEnvironment; then
      pm-cli output:error "Could not setup environment" && exit 1;
    fi

    #
    # install the app if we're in the web
    # service container
    #
    if ! installApplication; then
      pm-cli output:error "Could not install ProcessMaker" && exit 1;
    else
      pm-cli output:header "ProcessMaker successfully installed";
    fi

    #
    # install the ProcessMaker-specific enterprise packages, if desired
    #
    if [ "$INSTALL_ENTERPRISE_PACKAGES" = TRUE ]; then
      if ! installEnterprisePackages; then
        pm-cli output:error "Could not install enterprise packages" && exit 1;
      else
        pm-cli output:header "ProcessMaker enterprise packages successfully installed";
      fi
    fi

    #
    # Mark as installed
    #
    touch storage/build/.installed;
  }

  #
  # ProcessMaker installation status
  #
  isInstalled() {
    if [ -f storage/build/.installed ]; then
      return 0;
    else
      return 1;
    fi
  }

  #
  # Source a few necessary env variables
  #
  sourceDockerEnv

  #
  # Check to see if ProcessMaker needs to be
  # installed and if so, run the commands to
  # do so. Otherwise, exit
  #
  if isInstalled; then
    pm-cli output:header "ProcessMaker already installed" && exit 0;
  else
    #
    # If we don't find a linked .env file and this is
    # a web service, then we need to run the
    # app's artisan install command
    #
    if ! installProcessMaker | tee -a storage/build/install.log; then
      pm-cli output:error "Install failed. See storage/build/install.log for details." && exit 1;
    fi
  fi

  #
  # re-enable telescope and we're done!
  #
  enableTelescope;
}
